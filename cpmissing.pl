#!/usr/bin/perl -w
use strict;
use File::Spec;
use Getopt::Std;

#
# Program Identification Section (____VERSION____ is replaced with the subversion revision number when the package is built)
#
my $PROGRAM_NAME="cpmissing";
my $PROGRAM_DESC="Copy missing files from remote system";
my $PROGRAM_VERSION="v2 _____VERSION_____ _____DATE_____";

# Use FindBin to locate our "require" modules in the scripts run directory
use FindBin ();
use lib "$FindBin::Bin";

# Reference and include global variables
use vars qw ($DEBUG $CACHE_FOLDER $CACHE_EXTENTION $RUNNINGWINDOWS $OFFLINE_CACHE);
require ("lib-globals.pl");

# Usage subroutine
sub usage
{
	print ("$PROGRAM_NAME (Build $PROGRAM_VERSION) - $PROGRAM_DESC\n");
	print ("Usage: $PROGRAM_NAME [-d] [-i include-ext] [-l] [-f ckpakReport] [-p pathToCopyTo] [path] [path ...]\n" );
	print ("        [-d] will turn on debug messages sent to STDERR\n");
	print ("        [-i] is a comma delimited list of file extentsions to match\n");
	print ("        [-l] Create symbolic links instead of copying the file.\n");
	print ("        [-f] Missing file report generated by ckpak.\n");
	print ("        [-z] Preserve Folder Hierarchy on destination.\n");
	print ("        [-p pathToCopyTo] - Where to copy the files\n");
	print ("        [path] is a file path to search\n");
	exit (0);
}

#
# Local Variables
my %cmdline_option = ();                # Command line options hash
my @pathList;                           # List of paths to search
my @includeExtList;                     # List of file extentions to match
my $includeExt;                         # Include Extension 
my $symlink;                            # -l Create symlinks instead
my $missingReport;                      # -f Path to missint report
my $makeFolders;                        # -z Create folder hierarchy
my $copyPath;                           # -p path to copy to

# Parse and validate command line options
if (! getopts('zdqlf:p:', \%cmdline_option) )
{
	print (STDOUT "WARNING\tInvalid commmand line parameters!\n");
	usage ();
}

# Set local and global variables from command line
$OFFLINE_CACHE = $cmdline_option{c};
$DEBUG = $cmdline_option{d};
$includeExt = $cmdline_option{i};
$symlink = $cmdline_option{l};
$missingReport = $cmdline_option{f};
$copyPath = $cmdline_option{p};

require ("lib-gatherPathList.pl");
@pathList = gatherPathList();

require ("lib-gatherIncludeList.pl");
@includeExtList = gatherIncludeList($includeExt);


if ( $DEBUG )
{
	print ("INFO\tARG -i is $includeExt\n") if defined ($includeExt);
	foreach my $ext (@includeExtList)
	{
		print ("INFO\tARG Include Extentsions: $ext\n");
	}
	print ("INFO\tARG -c is $OFFLINE_CACHE\n") if defined ($OFFLINE_CACHE);
	foreach my $path (@pathList)
	{
		print ("INFO\tARG Searching: $path\n");
	}
}

require ("lib-getMetaDataList.pl");
my %metaData = getMetaDataList (\@pathList, \@includeExtList);

require ("lib-read_file.pl");
use File::Copy;

#
# Read the error file into errorList
#
my @errorList = read_file($missingReport);

my $totalErrors = 0;
my $totalFiles = 0;

#
# For each error, try and locate the sha1 in the %hash
# When we find the sha1 in the %hash, copy the file to the destination
#
foreach my $line (@errorList)
{
	chomp ($line);

	if ( $line =~ /NOT_FOUND_REMOTE/ )
	{

		(my $status, my $sha1, my $filename, my $path) = split (/\t/, $line, 4);
	
		print (STDOUT "SHA1\t$sha1\t$filename\n") if $DEBUG;

		if ( $metaData{$sha1} )
		{
			print ("FOUND\t$sha1\t$filename\t$metaData{$sha1}{sha1}\n") if $DEBUG;

			my $srcFile = $metaData{$sha1}->{path};

			$srcFile = File::Spec->rel2abs($srcFile);   # Dereference the file path
			$srcFile = File::Spec->canonpath($srcFile); # Make name pretty for the platform

			my $directory = dirname($srcFile);       # Directory of $file
			my $fileName = basename($srcFile);       # File name of $file

			my $destFile;
			
			if ( $makeFolders )
			{
				$destFile = File::Spec->catfile ($copyPath, $srcFile);
				my $destDir = dirname($destFile);
				# Create the destionation directory
				mkpath $destDir;
			}
			else
			{
				$destFile = File::Spec->catfile ($copyPath, $fileName);
			}

			if ( -e $destFile )
			{
				print ("WARNING\t$destFile exists, not overwriting!!!!\n");
			}
			else
			{
				$totalFiles++;

				if ( $symlink )
				{
					print ("Symlink [$srcFile] to [$destFile]\n");
					symlink ($srcFile, $destFile) or die "symlink failed: $!";;;
				}
				else
				{
					print ("Copy [$srcFile] to [$destFile]\n");
					copy ($srcFile, $destFile) or die "copy failed: $!";;
				}
			}
		}
		else
		{
			print ("WARNING\t$sha1\t$filename\tNOT_FOUND\n") if ! $DEBUG;
			$totalErrors++;
		}
	}
}

print ("$totalErrors total errors from $totalFiles files copied.\n");

print (STDOUT "INFO\tDone!\n") if $DEBUG;

1;


